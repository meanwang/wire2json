// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: .\company.proto
package com.mean.proto;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import java.util.Collections;
import java.util.List;
import okio.ByteString;

import static com.squareup.wire.Message.Datatype.BOOL;
import static com.squareup.wire.Message.Datatype.BYTES;
import static com.squareup.wire.Message.Datatype.DOUBLE;
import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Label.REPEATED;
import static com.squareup.wire.Message.Label.REQUIRED;

public final class Company extends Message {
  private static final long serialVersionUID = 0L;

  public static final List<Person> DEFAULT_STAFFS = Collections.emptyList();
  public static final String DEFAULT_COMPANY_NAME = "";
  public static final Double DEFAULT_PROFIT = 0D;
  public static final Boolean DEFAULT_IS_PUBLIC = false;
  public static final ByteString DEFAULT_SIGNATURE = ByteString.EMPTY;

  @ProtoField(tag = 1, label = REPEATED, messageType = Person.class)
  public final List<Person> staffs;

  @ProtoField(tag = 2, type = STRING, label = REQUIRED)
  public final String company_name;

  @ProtoField(tag = 3, type = DOUBLE, label = REQUIRED)
  public final Double profit;

  @ProtoField(tag = 4, type = BOOL, label = REQUIRED)
  public final Boolean is_public;

  @ProtoField(tag = 5, type = BYTES, label = REQUIRED)
  public final ByteString signature;

  public Company(List<Person> staffs, String company_name, Double profit, Boolean is_public, ByteString signature) {
    this.staffs = immutableCopyOf(staffs);
    this.company_name = company_name;
    this.profit = profit;
    this.is_public = is_public;
    this.signature = signature;
  }

  private Company(Builder builder) {
    this(builder.staffs, builder.company_name, builder.profit, builder.is_public, builder.signature);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Company)) return false;
    Company o = (Company) other;
    return equals(staffs, o.staffs)
        && equals(company_name, o.company_name)
        && equals(profit, o.profit)
        && equals(is_public, o.is_public)
        && equals(signature, o.signature);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = staffs != null ? staffs.hashCode() : 1;
      result = result * 37 + (company_name != null ? company_name.hashCode() : 0);
      result = result * 37 + (profit != null ? profit.hashCode() : 0);
      result = result * 37 + (is_public != null ? is_public.hashCode() : 0);
      result = result * 37 + (signature != null ? signature.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<Company> {

    public List<Person> staffs;
    public String company_name;
    public Double profit;
    public Boolean is_public;
    public ByteString signature;

    public Builder() {
    }

    public Builder(Company message) {
      super(message);
      if (message == null) return;
      this.staffs = copyOf(message.staffs);
      this.company_name = message.company_name;
      this.profit = message.profit;
      this.is_public = message.is_public;
      this.signature = message.signature;
    }

    public Builder staffs(List<Person> staffs) {
      this.staffs = checkForNulls(staffs);
      return this;
    }

    public Builder company_name(String company_name) {
      this.company_name = company_name;
      return this;
    }

    public Builder profit(Double profit) {
      this.profit = profit;
      return this;
    }

    public Builder is_public(Boolean is_public) {
      this.is_public = is_public;
      return this;
    }

    public Builder signature(ByteString signature) {
      this.signature = signature;
      return this;
    }

    @Override
    public Company build() {
      checkRequiredFields();
      return new Company(this);
    }
  }
}
