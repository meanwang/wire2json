// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: .\game_pktown.proto
package com.wesocial.apollo.protocol.protobuf.game_pktown;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import com.wesocial.apollo.protocol.protobuf.game.GameResult;
import java.util.Collections;
import java.util.List;

import static com.squareup.wire.Message.Datatype.INT32;
import static com.squareup.wire.Message.Datatype.UINT64;
import static com.squareup.wire.Message.Label.REPEATED;

public final class GamePktownGamedata extends Message {
  private static final long serialVersionUID = 0L;

  public static final List<GamePktownPlayerData> DEFAULT_PLAYER_DATAS = Collections.emptyList();
  public static final Long DEFAULT_BEGIN_TIMESTAMP = 0L;
  public static final Integer DEFAULT_GAME_STATUS = 0;
  public static final Integer DEFAULT_VERSION = 0;

  @ProtoField(tag = 1, label = REPEATED, messageType = GamePktownPlayerData.class)
  public final List<GamePktownPlayerData> player_datas;

  /**
   * 玩家数据
   */
  @ProtoField(tag = 2, type = UINT64)
  public final Long begin_timestamp;

  /**
   * 游戏开始时间戳（ms）
   */
  @ProtoField(tag = 3, type = INT32)
  public final Integer game_status;

  /**
   * 当前游戏状态，见GameStatus
   */
  @ProtoField(tag = 4)
  public final GameResult game_result;

  /**
   * 游戏结果，仅当游戏结束时设置
   */
  @ProtoField(tag = 5, type = INT32)
  public final Integer version;

  public GamePktownGamedata(List<GamePktownPlayerData> player_datas, Long begin_timestamp, Integer game_status, GameResult game_result, Integer version) {
    this.player_datas = immutableCopyOf(player_datas);
    this.begin_timestamp = begin_timestamp;
    this.game_status = game_status;
    this.game_result = game_result;
    this.version = version;
  }

  private GamePktownGamedata(Builder builder) {
    this(builder.player_datas, builder.begin_timestamp, builder.game_status, builder.game_result, builder.version);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof GamePktownGamedata)) return false;
    GamePktownGamedata o = (GamePktownGamedata) other;
    return equals(player_datas, o.player_datas)
        && equals(begin_timestamp, o.begin_timestamp)
        && equals(game_status, o.game_status)
        && equals(game_result, o.game_result)
        && equals(version, o.version);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = player_datas != null ? player_datas.hashCode() : 1;
      result = result * 37 + (begin_timestamp != null ? begin_timestamp.hashCode() : 0);
      result = result * 37 + (game_status != null ? game_status.hashCode() : 0);
      result = result * 37 + (game_result != null ? game_result.hashCode() : 0);
      result = result * 37 + (version != null ? version.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<GamePktownGamedata> {

    public List<GamePktownPlayerData> player_datas;
    public Long begin_timestamp;
    public Integer game_status;
    public GameResult game_result;
    public Integer version;

    public Builder() {
    }

    public Builder(GamePktownGamedata message) {
      super(message);
      if (message == null) return;
      this.player_datas = copyOf(message.player_datas);
      this.begin_timestamp = message.begin_timestamp;
      this.game_status = message.game_status;
      this.game_result = message.game_result;
      this.version = message.version;
    }

    public Builder player_datas(List<GamePktownPlayerData> player_datas) {
      this.player_datas = checkForNulls(player_datas);
      return this;
    }

    /**
     * 玩家数据
     */
    public Builder begin_timestamp(Long begin_timestamp) {
      this.begin_timestamp = begin_timestamp;
      return this;
    }

    /**
     * 游戏开始时间戳（ms）
     */
    public Builder game_status(Integer game_status) {
      this.game_status = game_status;
      return this;
    }

    /**
     * 当前游戏状态，见GameStatus
     */
    public Builder game_result(GameResult game_result) {
      this.game_result = game_result;
      return this;
    }

    /**
     * 游戏结果，仅当游戏结束时设置
     */
    public Builder version(Integer version) {
      this.version = version;
      return this;
    }

    @Override
    public GamePktownGamedata build() {
      return new GamePktownGamedata(this);
    }
  }
}
