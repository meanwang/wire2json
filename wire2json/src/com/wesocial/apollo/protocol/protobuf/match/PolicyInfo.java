// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: .\match.proto
package com.wesocial.apollo.protocol.protobuf.match;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;

import static com.squareup.wire.Message.Datatype.INT32;

/**
 * -------------------------------------------------------------
 * 2. 相关基础结构体
 * -------------------------------------------------------------
 */
public final class PolicyInfo extends Message {
  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_GAME_POLICY = 0;
  public static final Integer DEFAULT_MATHCING_OVER_TIME = 0;
  public static final Integer DEFAULT_GROUP_NUM = 0;
  public static final Integer DEFAULT_TYPE = 0;
  public static final Integer DEFAULT_IF_AI_PLAY = 0;
  public static final Integer DEFAULT_GAME_COIN_NUM = 0;

  @ProtoField(tag = 1, type = INT32)
  public final Integer game_policy;

  /**
   * 游戏的玩法
   */
  @ProtoField(tag = 2, type = INT32)
  public final Integer mathcing_over_time;

  /**
   * 排队超时时间
   */
  @ProtoField(tag = 3, type = INT32)
  public final Integer group_num;

  /**
   * 一局玩家个数
   */
  @ProtoField(tag = 4, type = INT32)
  public final Integer type;

  /**
   * 场次类别 1:多人场 2:pk场
   */
  @ProtoField(tag = 5, type = INT32)
  public final Integer if_ai_play;

  /**
   * 超时是否可以添加ai
   */
  @ProtoField(tag = 6, type = INT32)
  public final Integer game_coin_num;

  public PolicyInfo(Integer game_policy, Integer mathcing_over_time, Integer group_num, Integer type, Integer if_ai_play, Integer game_coin_num) {
    this.game_policy = game_policy;
    this.mathcing_over_time = mathcing_over_time;
    this.group_num = group_num;
    this.type = type;
    this.if_ai_play = if_ai_play;
    this.game_coin_num = game_coin_num;
  }

  private PolicyInfo(Builder builder) {
    this(builder.game_policy, builder.mathcing_over_time, builder.group_num, builder.type, builder.if_ai_play, builder.game_coin_num);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof PolicyInfo)) return false;
    PolicyInfo o = (PolicyInfo) other;
    return equals(game_policy, o.game_policy)
        && equals(mathcing_over_time, o.mathcing_over_time)
        && equals(group_num, o.group_num)
        && equals(type, o.type)
        && equals(if_ai_play, o.if_ai_play)
        && equals(game_coin_num, o.game_coin_num);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = game_policy != null ? game_policy.hashCode() : 0;
      result = result * 37 + (mathcing_over_time != null ? mathcing_over_time.hashCode() : 0);
      result = result * 37 + (group_num != null ? group_num.hashCode() : 0);
      result = result * 37 + (type != null ? type.hashCode() : 0);
      result = result * 37 + (if_ai_play != null ? if_ai_play.hashCode() : 0);
      result = result * 37 + (game_coin_num != null ? game_coin_num.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<PolicyInfo> {

    public Integer game_policy;
    public Integer mathcing_over_time;
    public Integer group_num;
    public Integer type;
    public Integer if_ai_play;
    public Integer game_coin_num;

    public Builder() {
    }

    public Builder(PolicyInfo message) {
      super(message);
      if (message == null) return;
      this.game_policy = message.game_policy;
      this.mathcing_over_time = message.mathcing_over_time;
      this.group_num = message.group_num;
      this.type = message.type;
      this.if_ai_play = message.if_ai_play;
      this.game_coin_num = message.game_coin_num;
    }

    public Builder game_policy(Integer game_policy) {
      this.game_policy = game_policy;
      return this;
    }

    /**
     * 游戏的玩法
     */
    public Builder mathcing_over_time(Integer mathcing_over_time) {
      this.mathcing_over_time = mathcing_over_time;
      return this;
    }

    /**
     * 排队超时时间
     */
    public Builder group_num(Integer group_num) {
      this.group_num = group_num;
      return this;
    }

    /**
     * 一局玩家个数
     */
    public Builder type(Integer type) {
      this.type = type;
      return this;
    }

    /**
     * 场次类别 1:多人场 2:pk场
     */
    public Builder if_ai_play(Integer if_ai_play) {
      this.if_ai_play = if_ai_play;
      return this;
    }

    /**
     * 超时是否可以添加ai
     */
    public Builder game_coin_num(Integer game_coin_num) {
      this.game_coin_num = game_coin_num;
      return this;
    }

    @Override
    public PolicyInfo build() {
      return new PolicyInfo(this);
    }
  }
}
