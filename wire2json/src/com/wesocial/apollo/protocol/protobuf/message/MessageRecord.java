// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: .\message.proto
package com.wesocial.apollo.protocol.protobuf.message;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import okio.ByteString;

import static com.squareup.wire.Message.Datatype.BYTES;
import static com.squareup.wire.Message.Datatype.INT32;
import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Datatype.UINT32;
import static com.squareup.wire.Message.Datatype.UINT64;

/**
 * -------------------------------------------------------------
 * 2. 相关基础结构体
 * -------------------------------------------------------------
 * 用于标识每条消息记录
 */
public final class MessageRecord extends Message {
  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_MESSAGE_TYPE = 0;
  public static final Long DEFAULT_MESSAGE_ID = 0L;
  public static final Long DEFAULT_SEND_INNER_ID = 0L;
  public static final Integer DEFAULT_TIMESTAMP = 0;
  public static final ByteString DEFAULT_CONTENT = ByteString.EMPTY;
  public static final String DEFAULT_DESC = "";
  public static final String DEFAULT_NICK = "";
  public static final String DEFAULT_HEAD_URL = "";
  public static final Integer DEFAULT_STATE = 0;

  @ProtoField(tag = 1, type = INT32)
  public final Integer message_type;

  /**
   * 消息类型
   */
  @ProtoField(tag = 2, type = UINT64)
  public final Long message_id;

  /**
   * 消息ID
   */
  @ProtoField(tag = 3, type = UINT64)
  public final Long send_inner_id;

  /**
   * 发送者inner_id
   */
  @ProtoField(tag = 4, type = UINT32)
  public final Integer timestamp;

  /**
   * 时间戳
   */
  @ProtoField(tag = 5, type = BYTES)
  public final ByteString content;

  /**
   * 消息内容
   */
  @ProtoField(tag = 6, type = STRING)
  public final String desc;

  /**
   * 消息描述，在发送消息的时候会指定
   */
  @ProtoField(tag = 7, type = STRING)
  public final String nick;

  /**
   * 发送者昵称
   */
  @ProtoField(tag = 8, type = STRING)
  public final String head_url;

  /**
   * 发送者的头像url
   */
  @ProtoField(tag = 9, type = INT32)
  public final Integer state;

  public MessageRecord(Integer message_type, Long message_id, Long send_inner_id, Integer timestamp, ByteString content, String desc, String nick, String head_url, Integer state) {
    this.message_type = message_type;
    this.message_id = message_id;
    this.send_inner_id = send_inner_id;
    this.timestamp = timestamp;
    this.content = content;
    this.desc = desc;
    this.nick = nick;
    this.head_url = head_url;
    this.state = state;
  }

  private MessageRecord(Builder builder) {
    this(builder.message_type, builder.message_id, builder.send_inner_id, builder.timestamp, builder.content, builder.desc, builder.nick, builder.head_url, builder.state);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof MessageRecord)) return false;
    MessageRecord o = (MessageRecord) other;
    return equals(message_type, o.message_type)
        && equals(message_id, o.message_id)
        && equals(send_inner_id, o.send_inner_id)
        && equals(timestamp, o.timestamp)
        && equals(content, o.content)
        && equals(desc, o.desc)
        && equals(nick, o.nick)
        && equals(head_url, o.head_url)
        && equals(state, o.state);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = message_type != null ? message_type.hashCode() : 0;
      result = result * 37 + (message_id != null ? message_id.hashCode() : 0);
      result = result * 37 + (send_inner_id != null ? send_inner_id.hashCode() : 0);
      result = result * 37 + (timestamp != null ? timestamp.hashCode() : 0);
      result = result * 37 + (content != null ? content.hashCode() : 0);
      result = result * 37 + (desc != null ? desc.hashCode() : 0);
      result = result * 37 + (nick != null ? nick.hashCode() : 0);
      result = result * 37 + (head_url != null ? head_url.hashCode() : 0);
      result = result * 37 + (state != null ? state.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<MessageRecord> {

    public Integer message_type;
    public Long message_id;
    public Long send_inner_id;
    public Integer timestamp;
    public ByteString content;
    public String desc;
    public String nick;
    public String head_url;
    public Integer state;

    public Builder() {
    }

    public Builder(MessageRecord message) {
      super(message);
      if (message == null) return;
      this.message_type = message.message_type;
      this.message_id = message.message_id;
      this.send_inner_id = message.send_inner_id;
      this.timestamp = message.timestamp;
      this.content = message.content;
      this.desc = message.desc;
      this.nick = message.nick;
      this.head_url = message.head_url;
      this.state = message.state;
    }

    public Builder message_type(Integer message_type) {
      this.message_type = message_type;
      return this;
    }

    /**
     * 消息类型
     */
    public Builder message_id(Long message_id) {
      this.message_id = message_id;
      return this;
    }

    /**
     * 消息ID
     */
    public Builder send_inner_id(Long send_inner_id) {
      this.send_inner_id = send_inner_id;
      return this;
    }

    /**
     * 发送者inner_id
     */
    public Builder timestamp(Integer timestamp) {
      this.timestamp = timestamp;
      return this;
    }

    /**
     * 时间戳
     */
    public Builder content(ByteString content) {
      this.content = content;
      return this;
    }

    /**
     * 消息内容
     */
    public Builder desc(String desc) {
      this.desc = desc;
      return this;
    }

    /**
     * 消息描述，在发送消息的时候会指定
     */
    public Builder nick(String nick) {
      this.nick = nick;
      return this;
    }

    /**
     * 发送者昵称
     */
    public Builder head_url(String head_url) {
      this.head_url = head_url;
      return this;
    }

    /**
     * 发送者的头像url
     */
    public Builder state(Integer state) {
      this.state = state;
      return this;
    }

    @Override
    public MessageRecord build() {
      return new MessageRecord(this);
    }
  }
}
