// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: .\message.proto
package com.wesocial.apollo.protocol.protobuf.message;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import okio.ByteString;

import static com.squareup.wire.Message.Datatype.BYTES;
import static com.squareup.wire.Message.Datatype.ENUM;
import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Datatype.UINT64;

/**
 * -------------------------------------------------------------
 * 3. 客户端和服务端交互协议
 * -------------------------------------------------------------
 * I. 发送消息
 * CMD为SEND_MESSAGE（501），请求结构为SendMessageReq，返回结构为SendMessageRsp
 */
public final class SendMessageReq extends Message {
  private static final long serialVersionUID = 0L;

  public static final ByteString DEFAULT_RESERVED_BUF = ByteString.EMPTY;
  public static final Long DEFAULT_RECV_INNER_ID = 0L;
  public static final ByteString DEFAULT_CONTENT = ByteString.EMPTY;
  public static final MessageType DEFAULT_MESSAGE_TYPE = MessageType.kMessageUser;
  public static final String DEFAULT_DESC = "";

  @ProtoField(tag = 1, type = BYTES)
  public final ByteString reserved_buf;

  /**
   * 服务端使用，客户端忽略
   */
  @ProtoField(tag = 2, type = UINT64)
  public final Long recv_inner_id;

  /**
   * 接收用户inner_id
   */
  @ProtoField(tag = 3, type = BYTES)
  public final ByteString content;

  /**
   * 消息内容
   */
  @ProtoField(tag = 4, type = ENUM)
  public final MessageType message_type;

  /**
   * 消息类型
   */
  @ProtoField(tag = 5, type = STRING)
  public final String desc;

  public SendMessageReq(ByteString reserved_buf, Long recv_inner_id, ByteString content, MessageType message_type, String desc) {
    this.reserved_buf = reserved_buf;
    this.recv_inner_id = recv_inner_id;
    this.content = content;
    this.message_type = message_type;
    this.desc = desc;
  }

  private SendMessageReq(Builder builder) {
    this(builder.reserved_buf, builder.recv_inner_id, builder.content, builder.message_type, builder.desc);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof SendMessageReq)) return false;
    SendMessageReq o = (SendMessageReq) other;
    return equals(reserved_buf, o.reserved_buf)
        && equals(recv_inner_id, o.recv_inner_id)
        && equals(content, o.content)
        && equals(message_type, o.message_type)
        && equals(desc, o.desc);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = reserved_buf != null ? reserved_buf.hashCode() : 0;
      result = result * 37 + (recv_inner_id != null ? recv_inner_id.hashCode() : 0);
      result = result * 37 + (content != null ? content.hashCode() : 0);
      result = result * 37 + (message_type != null ? message_type.hashCode() : 0);
      result = result * 37 + (desc != null ? desc.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<SendMessageReq> {

    public ByteString reserved_buf;
    public Long recv_inner_id;
    public ByteString content;
    public MessageType message_type;
    public String desc;

    public Builder() {
    }

    public Builder(SendMessageReq message) {
      super(message);
      if (message == null) return;
      this.reserved_buf = message.reserved_buf;
      this.recv_inner_id = message.recv_inner_id;
      this.content = message.content;
      this.message_type = message.message_type;
      this.desc = message.desc;
    }

    public Builder reserved_buf(ByteString reserved_buf) {
      this.reserved_buf = reserved_buf;
      return this;
    }

    /**
     * 服务端使用，客户端忽略
     */
    public Builder recv_inner_id(Long recv_inner_id) {
      this.recv_inner_id = recv_inner_id;
      return this;
    }

    /**
     * 接收用户inner_id
     */
    public Builder content(ByteString content) {
      this.content = content;
      return this;
    }

    /**
     * 消息内容
     */
    public Builder message_type(MessageType message_type) {
      this.message_type = message_type;
      return this;
    }

    /**
     * 消息类型
     */
    public Builder desc(String desc) {
      this.desc = desc;
      return this;
    }

    @Override
    public SendMessageReq build() {
      return new SendMessageReq(this);
    }
  }
}
