// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: .\misc.proto
package com.wesocial.apollo.protocol.protobuf.misc;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import okio.ByteString;

import static com.squareup.wire.Message.Datatype.BYTES;
import static com.squareup.wire.Message.Datatype.INT32;

/**
 * for configuration
 * cmd = BATCH_GET_CONFIG
 */
public final class ConfigInfo extends Message {
  private static final long serialVersionUID = 0L;

  public static final ByteString DEFAULT_VALUE = ByteString.EMPTY;
  public static final Integer DEFAULT_TYPE = 0;
  public static final Integer DEFAULT_VERSION = 0;
  public static final Integer DEFAULT_VALID_FLAG = 0;

  @ProtoField(tag = 1, type = BYTES)
  public final ByteString value;

  /**
   * key对应的value值
   * 对应的类型列表 (1 - 自定义的字符串格式，2 - 序列化后的结构数据)
   */
  @ProtoField(tag = 2, type = INT32)
  public final Integer type;

  /**
   * key对应的type类型
   */
  @ProtoField(tag = 3, type = INT32)
  public final Integer version;

  /**
   * 该key最新的version
   * 合法性标识, 1 - key存在，并且有更新 ，2 - key存在，value值没有更新 3 - key不存在
   */
  @ProtoField(tag = 4, type = INT32)
  public final Integer valid_flag;

  public ConfigInfo(ByteString value, Integer type, Integer version, Integer valid_flag) {
    this.value = value;
    this.type = type;
    this.version = version;
    this.valid_flag = valid_flag;
  }

  private ConfigInfo(Builder builder) {
    this(builder.value, builder.type, builder.version, builder.valid_flag);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof ConfigInfo)) return false;
    ConfigInfo o = (ConfigInfo) other;
    return equals(value, o.value)
        && equals(type, o.type)
        && equals(version, o.version)
        && equals(valid_flag, o.valid_flag);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = value != null ? value.hashCode() : 0;
      result = result * 37 + (type != null ? type.hashCode() : 0);
      result = result * 37 + (version != null ? version.hashCode() : 0);
      result = result * 37 + (valid_flag != null ? valid_flag.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<ConfigInfo> {

    public ByteString value;
    public Integer type;
    public Integer version;
    public Integer valid_flag;

    public Builder() {
    }

    public Builder(ConfigInfo message) {
      super(message);
      if (message == null) return;
      this.value = message.value;
      this.type = message.type;
      this.version = message.version;
      this.valid_flag = message.valid_flag;
    }

    public Builder value(ByteString value) {
      this.value = value;
      return this;
    }

    /**
     * key对应的value值
     * 对应的类型列表 (1 - 自定义的字符串格式，2 - 序列化后的结构数据)
     */
    public Builder type(Integer type) {
      this.type = type;
      return this;
    }

    /**
     * key对应的type类型
     */
    public Builder version(Integer version) {
      this.version = version;
      return this;
    }

    /**
     * 该key最新的version
     * 合法性标识, 1 - key存在，并且有更新 ，2 - key存在，value值没有更新 3 - key不存在
     */
    public Builder valid_flag(Integer valid_flag) {
      this.valid_flag = valid_flag;
      return this;
    }

    @Override
    public ConfigInfo build() {
      return new ConfigInfo(this);
    }
  }
}
