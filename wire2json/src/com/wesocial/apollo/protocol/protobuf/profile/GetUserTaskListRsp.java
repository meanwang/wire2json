// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: .\profile.proto
package com.wesocial.apollo.protocol.protobuf.profile;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import java.util.Collections;
import java.util.List;
import okio.ByteString;

import static com.squareup.wire.Message.Datatype.BYTES;
import static com.squareup.wire.Message.Label.REPEATED;

public final class GetUserTaskListRsp extends Message {
  private static final long serialVersionUID = 0L;

  public static final ByteString DEFAULT_RESERVED_BUF = ByteString.EMPTY;
  public static final List<UserTask> DEFAULT_NOVICE_TASKS = Collections.emptyList();
  public static final List<UserTask> DEFAULT_DAILY_TASKS = Collections.emptyList();

  @ProtoField(tag = 1, type = BYTES)
  public final ByteString reserved_buf;

  /**
   * 服务端使用，客户端忽略
   */
  @ProtoField(tag = 2, label = REPEATED, messageType = UserTask.class)
  public final List<UserTask> novice_tasks;

  /**
   * 新手任务列表
   */
  @ProtoField(tag = 3, label = REPEATED, messageType = UserTask.class)
  public final List<UserTask> daily_tasks;

  public GetUserTaskListRsp(ByteString reserved_buf, List<UserTask> novice_tasks, List<UserTask> daily_tasks) {
    this.reserved_buf = reserved_buf;
    this.novice_tasks = immutableCopyOf(novice_tasks);
    this.daily_tasks = immutableCopyOf(daily_tasks);
  }

  private GetUserTaskListRsp(Builder builder) {
    this(builder.reserved_buf, builder.novice_tasks, builder.daily_tasks);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof GetUserTaskListRsp)) return false;
    GetUserTaskListRsp o = (GetUserTaskListRsp) other;
    return equals(reserved_buf, o.reserved_buf)
        && equals(novice_tasks, o.novice_tasks)
        && equals(daily_tasks, o.daily_tasks);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = reserved_buf != null ? reserved_buf.hashCode() : 0;
      result = result * 37 + (novice_tasks != null ? novice_tasks.hashCode() : 1);
      result = result * 37 + (daily_tasks != null ? daily_tasks.hashCode() : 1);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<GetUserTaskListRsp> {

    public ByteString reserved_buf;
    public List<UserTask> novice_tasks;
    public List<UserTask> daily_tasks;

    public Builder() {
    }

    public Builder(GetUserTaskListRsp message) {
      super(message);
      if (message == null) return;
      this.reserved_buf = message.reserved_buf;
      this.novice_tasks = copyOf(message.novice_tasks);
      this.daily_tasks = copyOf(message.daily_tasks);
    }

    public Builder reserved_buf(ByteString reserved_buf) {
      this.reserved_buf = reserved_buf;
      return this;
    }

    /**
     * 服务端使用，客户端忽略
     */
    public Builder novice_tasks(List<UserTask> novice_tasks) {
      this.novice_tasks = checkForNulls(novice_tasks);
      return this;
    }

    /**
     * 新手任务列表
     */
    public Builder daily_tasks(List<UserTask> daily_tasks) {
      this.daily_tasks = checkForNulls(daily_tasks);
      return this;
    }

    @Override
    public GetUserTaskListRsp build() {
      return new GetUserTaskListRsp(this);
    }
  }
}
