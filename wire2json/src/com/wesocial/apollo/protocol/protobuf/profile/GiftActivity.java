// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: .\profile.proto
package com.wesocial.apollo.protocol.protobuf.profile;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import java.util.Collections;
import java.util.List;

import static com.squareup.wire.Message.Datatype.INT32;
import static com.squareup.wire.Message.Datatype.INT64;
import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Datatype.UINT32;
import static com.squareup.wire.Message.Label.REPEATED;

/**
 * 礼包活动信息
 */
public final class GiftActivity extends Message {
  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_ID = 0L;
  public static final Integer DEFAULT_BEGIN_TIME = 0;
  public static final Integer DEFAULT_END_TIME = 0;
  public static final String DEFAULT_IMAGE = "";
  public static final String DEFAULT_TITLE = "";
  public static final String DEFAULT_SUBTITLE = "";
  public static final String DEFAULT_RULE = "";
  public static final List<GiftContent> DEFAULT_CONTENT = Collections.emptyList();
  public static final String DEFAULT_TIPS = "";
  public static final Integer DEFAULT_STATUS = 0;
  public static final String DEFAULT_CDKEY = "";
  public static final String DEFAULT_MESSAGE = "";
  public static final String DEFAULT_ITEM_IMAGE = "";

  @ProtoField(tag = 1, type = INT64)
  public final Long id;

  /**
   * 礼包活动id
   */
  @ProtoField(tag = 2, type = UINT32)
  public final Integer begin_time;

  /**
   * 起始时间时间戳
   */
  @ProtoField(tag = 3, type = UINT32)
  public final Integer end_time;

  /**
   * 结束时间时间戳
   */
  @ProtoField(tag = 4, type = STRING)
  public final String image;

  /**
   * 活动的图片
   */
  @ProtoField(tag = 5, type = STRING)
  public final String title;

  /**
   * 标题
   */
  @ProtoField(tag = 6, type = STRING)
  public final String subtitle;

  /**
   * 副标题
   */
  @ProtoField(tag = 7, type = STRING)
  public final String rule;

  /**
   * 规则
   */
  @ProtoField(tag = 8, label = REPEATED, messageType = GiftContent.class)
  public final List<GiftContent> content;

  /**
   * 内容
   */
  @ProtoField(tag = 9, type = STRING)
  public final String tips;

  /**
   * 领取之后的提示
   */
  @ProtoField(tag = 10, type = INT32)
  public final Integer status;

  /**
   * 用户领取状态：1-不符合条件 2-可领取 3-已领取
   */
  @ProtoField(tag = 11, type = STRING)
  public final String cdkey;

  /**
   * 用户已经领取的cdkey
   */
  @ProtoField(tag = 12, type = STRING)
  public final String message;

  /**
   * 用户领取之后系统发送的提示消息，前端忽略
   */
  @ProtoField(tag = 13, type = STRING)
  public final String item_image;

  public GiftActivity(Long id, Integer begin_time, Integer end_time, String image, String title, String subtitle, String rule, List<GiftContent> content, String tips, Integer status, String cdkey, String message, String item_image) {
    this.id = id;
    this.begin_time = begin_time;
    this.end_time = end_time;
    this.image = image;
    this.title = title;
    this.subtitle = subtitle;
    this.rule = rule;
    this.content = immutableCopyOf(content);
    this.tips = tips;
    this.status = status;
    this.cdkey = cdkey;
    this.message = message;
    this.item_image = item_image;
  }

  private GiftActivity(Builder builder) {
    this(builder.id, builder.begin_time, builder.end_time, builder.image, builder.title, builder.subtitle, builder.rule, builder.content, builder.tips, builder.status, builder.cdkey, builder.message, builder.item_image);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof GiftActivity)) return false;
    GiftActivity o = (GiftActivity) other;
    return equals(id, o.id)
        && equals(begin_time, o.begin_time)
        && equals(end_time, o.end_time)
        && equals(image, o.image)
        && equals(title, o.title)
        && equals(subtitle, o.subtitle)
        && equals(rule, o.rule)
        && equals(content, o.content)
        && equals(tips, o.tips)
        && equals(status, o.status)
        && equals(cdkey, o.cdkey)
        && equals(message, o.message)
        && equals(item_image, o.item_image);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = id != null ? id.hashCode() : 0;
      result = result * 37 + (begin_time != null ? begin_time.hashCode() : 0);
      result = result * 37 + (end_time != null ? end_time.hashCode() : 0);
      result = result * 37 + (image != null ? image.hashCode() : 0);
      result = result * 37 + (title != null ? title.hashCode() : 0);
      result = result * 37 + (subtitle != null ? subtitle.hashCode() : 0);
      result = result * 37 + (rule != null ? rule.hashCode() : 0);
      result = result * 37 + (content != null ? content.hashCode() : 1);
      result = result * 37 + (tips != null ? tips.hashCode() : 0);
      result = result * 37 + (status != null ? status.hashCode() : 0);
      result = result * 37 + (cdkey != null ? cdkey.hashCode() : 0);
      result = result * 37 + (message != null ? message.hashCode() : 0);
      result = result * 37 + (item_image != null ? item_image.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<GiftActivity> {

    public Long id;
    public Integer begin_time;
    public Integer end_time;
    public String image;
    public String title;
    public String subtitle;
    public String rule;
    public List<GiftContent> content;
    public String tips;
    public Integer status;
    public String cdkey;
    public String message;
    public String item_image;

    public Builder() {
    }

    public Builder(GiftActivity message) {
      super(message);
      if (message == null) return;
      this.id = message.id;
      this.begin_time = message.begin_time;
      this.end_time = message.end_time;
      this.image = message.image;
      this.title = message.title;
      this.subtitle = message.subtitle;
      this.rule = message.rule;
      this.content = copyOf(message.content);
      this.tips = message.tips;
      this.status = message.status;
      this.cdkey = message.cdkey;
      this.message = message.message;
      this.item_image = message.item_image;
    }

    public Builder id(Long id) {
      this.id = id;
      return this;
    }

    /**
     * 礼包活动id
     */
    public Builder begin_time(Integer begin_time) {
      this.begin_time = begin_time;
      return this;
    }

    /**
     * 起始时间时间戳
     */
    public Builder end_time(Integer end_time) {
      this.end_time = end_time;
      return this;
    }

    /**
     * 结束时间时间戳
     */
    public Builder image(String image) {
      this.image = image;
      return this;
    }

    /**
     * 活动的图片
     */
    public Builder title(String title) {
      this.title = title;
      return this;
    }

    /**
     * 标题
     */
    public Builder subtitle(String subtitle) {
      this.subtitle = subtitle;
      return this;
    }

    /**
     * 副标题
     */
    public Builder rule(String rule) {
      this.rule = rule;
      return this;
    }

    /**
     * 规则
     */
    public Builder content(List<GiftContent> content) {
      this.content = checkForNulls(content);
      return this;
    }

    /**
     * 内容
     */
    public Builder tips(String tips) {
      this.tips = tips;
      return this;
    }

    /**
     * 领取之后的提示
     */
    public Builder status(Integer status) {
      this.status = status;
      return this;
    }

    /**
     * 用户领取状态：1-不符合条件 2-可领取 3-已领取
     */
    public Builder cdkey(String cdkey) {
      this.cdkey = cdkey;
      return this;
    }

    /**
     * 用户已经领取的cdkey
     */
    public Builder message(String message) {
      this.message = message;
      return this;
    }

    /**
     * 用户领取之后系统发送的提示消息，前端忽略
     */
    public Builder item_image(String item_image) {
      this.item_image = item_image;
      return this;
    }

    @Override
    public GiftActivity build() {
      return new GiftActivity(this);
    }
  }
}
