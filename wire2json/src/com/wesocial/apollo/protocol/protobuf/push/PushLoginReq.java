// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: .\push.proto
package com.wesocial.apollo.protocol.protobuf.push;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import okio.ByteString;

import static com.squareup.wire.Message.Datatype.BYTES;
import static com.squareup.wire.Message.Datatype.ENUM;
import static com.squareup.wire.Message.Datatype.UINT64;

/**
 * -------------------------------------------------------------
 * 3. 客户端和服务端交互协议
 * -------------------------------------------------------------
 * I. 推送登录命令
 * 客户端在和服务端正常建立连接，并且注册之后（即已经成功获取innerid）
 * 需要发起PushLogin命令，另外在连接重新建立的时候也都需要发起该命令
 * 请求结构为PushLoginReq，回应结构为空
 */
public final class PushLoginReq extends Message {
  private static final long serialVersionUID = 0L;

  public static final ByteString DEFAULT_RESERVED_BUF = ByteString.EMPTY;
  public static final Long DEFAULT_INNER_ID = 0L;
  public static final ByteString DEFAULT_DEVICE_TOKEN = ByteString.EMPTY;
  public static final DeviceType DEFAULT_DEVICE_TYPE = DeviceType.kDeviceUnknown;
  public static final NetWorkType DEFAULT_NETWORK_TYPE = NetWorkType.kNetworkUnknow;
  public static final ByteString DEFAULT_CLIENT_IP = ByteString.EMPTY;

  @ProtoField(tag = 1, type = BYTES)
  public final ByteString reserved_buf;

  /**
   * 服务端使用，客户端忽略
   */
  @ProtoField(tag = 2, type = UINT64)
  public final Long inner_id;

  /**
   * 内部id
   */
  @ProtoField(tag = 3, type = BYTES)
  public final ByteString device_token;

  /**
   * 设备token
   */
  @ProtoField(tag = 4, type = ENUM)
  public final DeviceType device_type;

  /**
   * 设备类型
   */
  @ProtoField(tag = 5, type = ENUM)
  public final NetWorkType network_type;

  /**
   * 网络类型
   */
  @ProtoField(tag = 6, type = BYTES)
  public final ByteString client_ip;

  public PushLoginReq(ByteString reserved_buf, Long inner_id, ByteString device_token, DeviceType device_type, NetWorkType network_type, ByteString client_ip) {
    this.reserved_buf = reserved_buf;
    this.inner_id = inner_id;
    this.device_token = device_token;
    this.device_type = device_type;
    this.network_type = network_type;
    this.client_ip = client_ip;
  }

  private PushLoginReq(Builder builder) {
    this(builder.reserved_buf, builder.inner_id, builder.device_token, builder.device_type, builder.network_type, builder.client_ip);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof PushLoginReq)) return false;
    PushLoginReq o = (PushLoginReq) other;
    return equals(reserved_buf, o.reserved_buf)
        && equals(inner_id, o.inner_id)
        && equals(device_token, o.device_token)
        && equals(device_type, o.device_type)
        && equals(network_type, o.network_type)
        && equals(client_ip, o.client_ip);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = reserved_buf != null ? reserved_buf.hashCode() : 0;
      result = result * 37 + (inner_id != null ? inner_id.hashCode() : 0);
      result = result * 37 + (device_token != null ? device_token.hashCode() : 0);
      result = result * 37 + (device_type != null ? device_type.hashCode() : 0);
      result = result * 37 + (network_type != null ? network_type.hashCode() : 0);
      result = result * 37 + (client_ip != null ? client_ip.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<PushLoginReq> {

    public ByteString reserved_buf;
    public Long inner_id;
    public ByteString device_token;
    public DeviceType device_type;
    public NetWorkType network_type;
    public ByteString client_ip;

    public Builder() {
    }

    public Builder(PushLoginReq message) {
      super(message);
      if (message == null) return;
      this.reserved_buf = message.reserved_buf;
      this.inner_id = message.inner_id;
      this.device_token = message.device_token;
      this.device_type = message.device_type;
      this.network_type = message.network_type;
      this.client_ip = message.client_ip;
    }

    public Builder reserved_buf(ByteString reserved_buf) {
      this.reserved_buf = reserved_buf;
      return this;
    }

    /**
     * 服务端使用，客户端忽略
     */
    public Builder inner_id(Long inner_id) {
      this.inner_id = inner_id;
      return this;
    }

    /**
     * 内部id
     */
    public Builder device_token(ByteString device_token) {
      this.device_token = device_token;
      return this;
    }

    /**
     * 设备token
     */
    public Builder device_type(DeviceType device_type) {
      this.device_type = device_type;
      return this;
    }

    /**
     * 设备类型
     */
    public Builder network_type(NetWorkType network_type) {
      this.network_type = network_type;
      return this;
    }

    /**
     * 网络类型
     */
    public Builder client_ip(ByteString client_ip) {
      this.client_ip = client_ip;
      return this;
    }

    @Override
    public PushLoginReq build() {
      return new PushLoginReq(this);
    }
  }
}
